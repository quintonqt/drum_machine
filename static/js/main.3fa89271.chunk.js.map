{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundKeys","keyiD","soundBit","desc","App","props","state","keySet","id","this","map","drumPad","React","Component","enabled","backgroundColor","color","DrumPad","padStatus","playSound","bind","handleKeyPress","document","addEventListener","removeEventListener","setState","event","sound","getElementById","currentTime","play","padEnable","setTimeout","textContent","e","key","toUpperCase","className","onClick","style","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAGMA,G,MAAY,CACjB,CACCC,MAAO,IACPC,SAAU,yDACVC,KAAM,aAEP,CACCF,MAAO,IACPC,SAAU,2DACVC,KAAM,QAEP,CACCF,MAAO,IACPC,SAAU,yDACVC,KAAM,iBAEP,CACCF,MAAO,IACPC,SAAU,+DACVC,KAAM,cAEP,CACCF,MAAO,IACPC,SAAU,0DACVC,KAAM,SAEP,CACCF,MAAO,IACPC,SAAU,0DACVC,KAAM,kBAEP,CACCF,MAAO,IACPC,SAAU,6DACVC,KAAM,gBAEP,CACCF,MAAO,IACPC,SAAU,6DACVC,KAAM,YAEP,CACCF,MAAO,IACPC,SAAU,gEACVC,KAAM,iBAIFC,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,OAAQP,GAHS,E,qDAQlB,OACC,yBAAKQ,GAAG,gBACP,4CACA,yBAAKA,GAAG,iBACP,yBAAKA,GAAG,YACR,yBAAKA,GAAG,iBACNC,KAAKH,MAAMC,OAAOG,KAAI,SAACC,GACvB,OACC,kBAAC,EAAD,CAASV,MAAOU,EAAQV,MAAOC,SAAUS,EAAQT,SAAUC,KAAMQ,EAAQR,iB,GAjB/DS,IAAMC,WA2BlBC,EAAU,CACfC,gBAAiB,QACjBC,MAAO,SAGFC,E,kDACL,WAAYZ,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZY,UAAW,MAGZ,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAPJ,E,gEAWlBE,SAASC,iBAAiB,UAAWd,KAAKY,kB,2CAI1CC,SAASE,oBAAoB,UAAWf,KAAKY,kB,kCAIhB,OAAzBZ,KAAKH,MAAMY,UACdT,KAAKgB,SAAS,CACbP,UAAWJ,IAGZL,KAAKgB,SAAS,CACbP,UAAW,S,gCAKJQ,GAAQ,IAAD,OACVC,EAAQL,SAASM,eAAenB,KAAKJ,MAAMJ,OACjD0B,EAAME,YAAc,EACpBF,EAAMG,OACNrB,KAAKsB,YACLC,YAAW,kBAAM,EAAKD,cAAa,KACnCT,SAASM,eAAe,WAAWK,YAAcxB,KAAKJ,MAAMF,O,qCAG9C+B,GACVA,EAAEC,IAAIC,gBAAkB3B,KAAKJ,MAAMJ,OACtCQ,KAAKU,c,+BAKN,OACC,yBACCkB,UAAU,WACVC,QAAS7B,KAAKU,UACdX,GAAIC,KAAKJ,MAAMF,KACfoC,MAAO9B,KAAKH,MAAMY,WAElB,2BAAOsB,IAAK/B,KAAKJ,MAAMH,SAAUmC,UAAU,OAAO7B,GAAIC,KAAKJ,MAAMJ,QAChEQ,KAAKJ,MAAMJ,W,GAvDMW,IAAMC,WA6DbT,ICpIKqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASM,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3fa89271.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst soundKeys = [\n\t{\n\t\tkeyiD: 'Q',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n\t\tdesc: 'Closed HH',\n\t},\n\t{\n\t\tkeyiD: 'W',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n\t\tdesc: 'Clap',\n\t},\n\t{\n\t\tkeyiD: 'E',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n\t\tdesc: 'Long, Open HH',\n\t},\n\t{\n\t\tkeyiD: 'A',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3',\n\t\tdesc: 'Side-Stick',\n\t},\n\t{\n\t\tkeyiD: 'S',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3',\n\t\tdesc: 'Snare',\n\t},\n\t{\n\t\tkeyiD: 'D',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3',\n\t\tdesc: 'Short, Open HH',\n\t},\n\t{\n\t\tkeyiD: 'Z',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n\t\tdesc: \"Kick 'n' Hat\",\n\t},\n\t{\n\t\tkeyiD: 'X',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n\t\tdesc: 'Reg Kick',\n\t},\n\t{\n\t\tkeyiD: 'C',\n\t\tsoundBit: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3',\n\t\tdesc: 'Punchy Kick',\n\t},\n];\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tkeySet: soundKeys,\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"drum-machine\">\n\t\t\t\t<h1>ThunderDrums</h1>\n\t\t\t\t<div id=\"control-panel\">\n\t\t\t\t\t<div id=\"display\"></div>\n\t\t\t\t\t<div id=\"pad-container\">\n\t\t\t\t\t\t{this.state.keySet.map((drumPad) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<DrumPad keyiD={drumPad.keyiD} soundBit={drumPad.soundBit} desc={drumPad.desc} />\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst enabled = {\n\tbackgroundColor: 'white',\n\tcolor: 'black',\n};\n\nclass DrumPad extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpadStatus: null,\n\t\t};\n\n\t\tthis.playSound = this.playSound.bind(this);\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener('keydown', this.handleKeyPress);\n\t}\n\n\tcomponentWillMount() {\n\t\tdocument.removeEventListener('keydown', this.handleKeyPress);\n\t}\n\n\tpadEnable() {\n\t\tif (this.state.padStatus === null) {\n\t\t\tthis.setState({\n\t\t\t\tpadStatus: enabled,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tpadStatus: null,\n\t\t\t});\n\t\t}\n\t}\n\n\tplaySound(event) {\n\t\tconst sound = document.getElementById(this.props.keyiD);\n\t\tsound.currentTime = 0;\n\t\tsound.play();\n\t\tthis.padEnable();\n\t\tsetTimeout(() => this.padEnable(), 100);\n\t\tdocument.getElementById('display').textContent = this.props.desc;\n\t}\n\n\thandleKeyPress(e) {\n\t\tif (e.key.toUpperCase() === this.props.keyiD) {\n\t\t\tthis.playSound();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"drum-pad\"\n\t\t\t\tonClick={this.playSound}\n\t\t\t\tid={this.props.desc}\n\t\t\t\tstyle={this.state.padStatus}\n\t\t\t>\n\t\t\t\t<audio src={this.props.soundBit} className=\"clip\" id={this.props.keyiD}></audio>\n\t\t\t\t{this.props.keyiD}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}